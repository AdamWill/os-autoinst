ACLOCAL_AMFLAGS = -I m4

doc_DATA = \
	README \
	INSTALL \
	COPYING \
	env.sh.sample \
	doc/basetest.html \
	doc/bmwqemu.html \
	doc/debian-install-workflow.txt \
	doc/fedora-installation.txt

#lib_LTLIBRARIES = libtinycv.la
#libtinycv_la_SOURCES = \
#	ppmclibs/tinycv_impl.cc \
#	ppmclibs/tinycv.h
#nodist_libtinycv_la_SOURCES = ppmclibs/tinycv.cc
#libtinycv_la_LDFLAGS = -no-undefined
#libtinycv_la_CXXFLAGS = \
#	$(OPENCV_CFLAGS) \
#	$(PERL_CFLAGS)
#libtinycv_la_LIBADD = $(OPENCV_LIBS)
#
#ppmcexecdir = $(pkglibexecdir)/ppmclibs
#ppmcexec_SCRIPTS = \
#	ppmclibs/tinycv.pm
#
#ppmclibs/tinycv.cc: ppmclibs/tinycv.xs
#	xsubpp $< > $@

packagestatedir = $(localstatedir)/lib/os-autoinst

packagestate_DATA_FOLDERS = \
	audio

backendexecdir = $(pkglibexecdir)/backend
backendexec_SCRIPTS = \
	backend/baseclass.pm \
	backend/kvm2usb.pm \
	backend/qemu.pm \
	backend/vbox.pm

backendhelpexecdir = $(pkglibexecdir)/backend/helper
backendhelpexec_SCRIPTS = \
	backend/helper/scancodes.pm

pkglibexec_SCRIPTS = \
	autoinstallstep.pm \
	autotest.pm \
	basenoupdate.pm \
	basetest.pm \
	bmwqemu.pm \
	httpnotifyconf.pm \
	installstep.pm \
	bmwrpc.pm \
	ocr.pm \
	cv.pm \
	needle.pm \
	rpc.pl \
	start.pl

pkglibexec_FOLDERS = \
	distri \
	tools \
	inst \
	inst.d \
	workaround

# sort the above out so it is not done directory wise

bin_SCRIPTS = bin/isotovideo

EXTRA_DIST = \
	autogen.sh \
	bin/isotovideo.in \
	ppmclibs/tinycv.i \
	$(backendhelpexec_SCRIPTS) $(backendexec_SCRIPTS) \
	$(doc_DATA) $(pkglibexec_DATA) $(pkglibexec_SCRIPTS) $(packagestate_DATA_FOLDERS) $(pkglibexec_FOLDERS)

CLEANFILES = \
	$(bin_SCRIPTS) \
	$(ppmcexec_SCRIPTS) \
	ppmclibs/tinycv_wrap.cxx \
	doc/basetest.html \
	doc/bmwqemu.html

doc/%.html: %.pm
	pod2html $< > $@

# XXX do this properly somehow
all-local:
	@cd ppmclibs; test -e Makefile -a Makefile -nt Makefile.PL || \
		perl Makefile.PL INSTALLDIRS=vendor OPTIMIZE="$(CXXFLAGS)";
	$(MAKE) -C ppmclibs

install-data-local:
	$(MKDIR_P) $(DESTDIR)/$(packagestatedir) ; \
	for i in $(packagestate_DATA_FOLDERS) ; do \
		cp -r $(top_srcdir)/$$i "$(DESTDIR)/$(packagestatedir)" ; \
	done
	$(MKDIR_P) "$(DESTDIR)/$(pkgdatadir)" ; \
	for i in $(pkglibexec_FOLDERS) ; do \
		cp -r $(top_srcdir)/$$i "$(DESTDIR)/$(pkglibexecdir)" ; \
	done
	$(MAKE) -C ppmclibs pure_install DESTDIR="$(DESTDIR)" # XXX

uninstall-local:
	for i in $(packagestate_DATA_FOLDERS) ; do \
		rm -rf "$(DESTDIR)/$(packagestatedir)/$$i" ; \
	done
	for i in $(pkglibexec_FOLDERS) ; do \
		rm -rf "$(DESTDIR)/$(pkglibexecdir)/$$i" ; \
	done

dist-hook:
	@if test -d "$(srcdir)/.git"; \
	then \
		echo Creating ChangeLog && \
		( cd "$(top_srcdir)" && \
		  echo '# Generated by Makefile. Do not edit.'; echo; \
		  $(top_srcdir)/missing --run git log ) > ChangeLog.tmp \
		&& mv -f ChangeLog.tmp $(distdir)/ChangeLog \
		|| ( rm -f ChangeLog.tmp ; \
		     echo Failed to generate ChangeLog >&2 ); \
	else \
		echo A git clone is required to generate a ChangeLog >&2; \
	fi
	rm -rf `find $(distdir) -name .gitignore`

distclean-local: clean-local

clean-local:
	$(MAKE) -C ppmclibs clean
	-rm -rf *.tar.*
